name: "VBCAPPSDEVOPS - HDAP"

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      apply:
        description: 'Apply changes?'
        required: true
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  TF_LOG: info
  TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
  APPLY_TERRAFORM: ${{ github.event.inputs.apply == 'true' || github.ref == 'refs/heads/main' && github.event_name == 'push' }}
  TF_EXAMPLE_DIR: ${{ vars.TF_EXAMPLE_DIR || 'examples/basic' }}

jobs:
  terraform-validate:
    name: "Validate"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Validate modules
        run: |
          for d in modules/*/ ; do
            echo "Validating $d..."
            cd $d
            terraform init -backend=false
            terraform validate
            cd ../../
          done

  terraform-plan:
    name: "Plan"
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID || '' }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET || 'aurora-postgresql-terraform-state' }}" \
            -backend-config="key=${{ env.TF_WORKSPACE }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE || 'aurora-postgresql-terraform-locks' }}"

      - name: Terraform Workspace
        id: workspace
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: |
          terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}
          echo "Using workspace: ${{ env.TF_WORKSPACE }}"

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: false

      - name: Save Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ env.TF_EXAMPLE_DIR }}/tfplan
          retention-days: 5

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Workspace: \`${{ env.TF_WORKSPACE }}\`
            #### Directory: \`${{ env.TF_EXAMPLE_DIR }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: "Apply"
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      success() && 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true') || 
      (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'prod' || 'dev') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID || '' }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}

      - name: Terraform Init
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET || 'aurora-postgresql-terraform-state' }}" \
            -backend-config="key=${{ env.TF_WORKSPACE }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE || 'aurora-postgresql-terraform-locks' }}"

      - name: Terraform Workspace
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: |
          terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}
          echo "Using workspace: ${{ env.TF_WORKSPACE }}"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
          path: ${{ env.TF_EXAMPLE_DIR }}

      - name: Terraform Apply
        working-directory: ${{ env.TF_EXAMPLE_DIR }}
        run: terraform apply -auto-approve tfplan

  notify:
    name: "Notification"
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-plan, terraform-apply]
    if: always()
    steps:
      - name: Determine job status
        id: check
        run: |
          if [[ ${{ needs.terraform-apply.result }} == 'success' ]]; then
            echo "message=:white_check_mark: Terraform successfully applied to ${{ env.TF_WORKSPACE }}" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ ${{ needs.terraform-apply.result }} == 'skipped' && ${{ needs.terraform-plan.result }} == 'success' ]]; then
            echo "message=:heavy_check_mark: Terraform plan successful, changes not applied" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          else
            echo "message=:x: Terraform workflow failed for ${{ env.TF_WORKSPACE }}" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ steps.check.outputs.message }}",
              "attachments": [
                {
                  "color": "${{ steps.check.outputs.color }}",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Workspace",
                      "value": "${{ env.TF_WORKSPACE }}",
                      "short": true
                    },
                    {
                      "title": "Triggered by",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Event",
                      "value": "${{ github.event_name }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
